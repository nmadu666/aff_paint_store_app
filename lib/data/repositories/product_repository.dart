import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/color_data_model.dart';
import '../models/parent_product_model.dart';
import '../models/product_model.dart';

/// L·ªõp ch·ª©a k·∫øt qu·∫£ c·ªßa m·ªôt trang d·ªØ li·ªáu s·∫£n ph·∫©m.
class ProductPage {
  final List<Product> products;
  final DocumentSnapshot? lastDoc; // Document cu·ªëi c√πng ƒë·ªÉ l√†m con tr·ªè cho trang ti·∫øp theo.
  final bool hasMore; // Cho bi·∫øt c√≥ c√≤n trang ƒë·ªÉ t·∫£i hay kh√¥ng.

  const ProductPage({
    required this.products,
    this.lastDoc,
    required this.hasMore,
  });
}

/// L·ªõp tr·ª´u t∆∞·ª£ng ƒë·ªãnh nghƒ©a c√°c ph∆∞∆°ng th·ª©c c·∫ßn c√≥ ƒë·ªÉ l·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m.
abstract class IProductRepository {
  /// L·∫•y danh s√°ch s·∫£n ph·∫©m, c√≥ th·ªÉ l·ªçc theo categoryId v√† trademarkId.
  /// C√≥ th·ªÉ t√¨m ki·∫øm theo `searchTerm` tr√™n t√™n v√† m√£ s·∫£n ph·∫©m.
  /// N·∫øu kh√¥ng c√≥ b·ªô l·ªçc n√†o ƒë∆∞·ª£c cung c·∫•p, n√≥ s·∫Ω tr·∫£ v·ªÅ t·∫•t c·∫£ s·∫£n ph·∫©m.
  Future<ProductPage> getProducts(
      {String? categoryId, String? trademarkId, String? searchTerm, int limit = 20, DocumentSnapshot? lastDoc});

  /// L·∫•y danh s√°ch c√°c ParentProduct ph√π h·ª£p v·ªõi m·ªôt m√†u c·ª• th·ªÉ.
  Future<List<ParentProduct>> getCompatibleParentProducts(ColorData color);

  /// L·∫•y danh s√°ch c√°c SKU (Product) thu·ªôc v·ªÅ m·ªôt ParentProduct.
  Future<List<Product>> getSkusForParent(String parentProductId);

  /// L·∫•y m·ªôt ParentProduct duy nh·∫•t b·∫±ng ID.
  Future<ParentProduct> getParentProductById(String id);
}

/// Tri·ªÉn khai repository s·ª≠ d·ª•ng Firebase Firestore.
class FirebaseProductRepository implements IProductRepository {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  @override
  Future<ProductPage> getProducts({
    String? categoryId,
    String? trademarkId,
    String? searchTerm,
    int limit = 20,
    DocumentSnapshot? lastDoc,
  }) async {
    print(
      'üîç [ProductRepo] L·∫•y trang s·∫£n ph·∫©m: categoryId=$categoryId, trademarkId=$trademarkId, searchTerm=$searchTerm, limit=$limit',
    );

    // L∆∞u √Ω: T√¨m ki·∫øm (searchTerm) v√† ph√¢n trang (pagination) th∆∞·ªùng kh√¥ng ƒëi c√πng nhau
    // trong Firestore n·∫øu kh√¥ng c√≥ d·ªãch v·ª• t√¨m ki·∫øm b√™n th·ª© ba (nh∆∞ Algolia).
    // Logic d∆∞·ªõi ƒë√¢y gi·∫£ ƒë·ªãnh r·∫±ng khi c√≥ searchTerm, ch√∫ng ta s·∫Ω kh√¥ng ph√¢n trang
    // v√† t·∫£i t·∫•t c·∫£ k·∫øt qu·∫£ ph√π h·ª£p (h√†nh vi c≈©).
    if (searchTerm != null && searchTerm.isNotEmpty) {
      // ƒê√¢y l√† ph·∫ßn logic c≈©, kh√¥ng ph√¢n trang, ƒë·ªÉ x·ª≠ l√Ω t√¨m ki·∫øm.
      // N√≥ s·∫Ω t·∫£i t·∫•t c·∫£ s·∫£n ph·∫©m v√† l·ªçc ph√≠a client.
      print('‚ö†Ô∏è [ProductRepo] Ch·∫ø ƒë·ªô t√¨m ki·∫øm, s·∫Ω t·∫£i t·∫•t c·∫£ v√† l·ªçc ph√≠a client.');
      final allProducts = await _getAllProductsForFilter(categoryId, trademarkId);
      final normalizedSearchTerm = searchTerm.toLowerCase().trim();
      final filteredProducts = allProducts.where((product) {
        return product.name.toLowerCase().contains(normalizedSearchTerm) ||
            product.code.toLowerCase().contains(normalizedSearchTerm);
      }).toList();
      return ProductPage(products: filteredProducts, hasMore: false);
    }

    // Logic ph√¢n trang m·ªõi (khi kh√¥ng c√≥ searchTerm)
    // Gi·∫£ ƒë·ªãnh collection 'products' ƒë√£ ƒë∆∞·ª£c phi chu·∫©n h√≥a v·ªõi c√°c tr∆∞·ªùng 'categoryId' v√† 'trademarkId'.
    Query query = _firestore.collection('products').orderBy('name');

    // √Åp d·ª•ng b·ªô l·ªçc
    if (categoryId != null) {
      query = query.where('categoryId', isEqualTo: categoryId);
    }
    if (trademarkId != null) {
      query = query.where('trademarkId', isEqualTo: trademarkId);
    }

    // √Åp d·ª•ng con tr·ªè ph√¢n trang
    if (lastDoc != null) {
      query = query.startAfterDocument(lastDoc);
    }

    // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng k·∫øt qu·∫£
    final snapshot = await query.limit(limit).get();

    final products = snapshot.docs.map((doc) => Product.fromFirestore(doc as DocumentSnapshot<Map<String, dynamic>>)).toList();
    final bool hasMore = products.length == limit;
    final DocumentSnapshot? newLastDoc = snapshot.docs.isNotEmpty ? snapshot.docs.last : null;

    return ProductPage(products: products, hasMore: hasMore, lastDoc: newLastDoc);
  }
  
  // H√†m tr·ª£ gi√∫p ƒë·ªÉ gi·ªØ l·∫°i logic c≈© cho vi·ªác t√¨m ki·∫øm (kh√¥ng ph√¢n trang)
  Future<List<Product>> _getAllProductsForFilter(String? categoryId, String? trademarkId) async {
     Query query = _firestore.collection('products');
      if (categoryId != null) query = query.where('categoryId', isEqualTo: categoryId);
      if (trademarkId != null) query = query.where('trademarkId', isEqualTo: trademarkId);
      final snapshot = await query.get();
      return snapshot.docs.map((doc) => Product.fromFirestore(doc as DocumentSnapshot<Map<String, dynamic>>)).toList();
  }

  @override
  Future<List<ParentProduct>> getCompatibleParentProducts(
    ColorData color,
  ) async {
    // 1. L·∫•y t·∫•t c·∫£ c√°c `colorMixingProductType` c√≥ s·∫µn cho m√†u n√†y
    //    t·ª´ sub-collection 'color_pricings'.
    print(
      'üîç [ProductRepo] L·∫•y c√°c lo·∫°i s·∫£n ph·∫©m t∆∞∆°ng th√≠ch cho m√†u: ${color.name} (ID: ${color.id})',
    );
    final pricingSnapshot = await _firestore
        .collection('colors')
        .doc(color.id)
        .collection('color_pricings')
        .get();

    if (pricingSnapshot.docs.isEmpty) {
      print(
        '‚ÑπÔ∏è [ProductRepo] Kh√¥ng t√¨m th·∫•y th√¥ng tin gi√° (pricing) cho m√†u ${color.id}. S·∫Ω kh√¥ng c√≥ s·∫£n ph·∫©m t∆∞∆°ng th√≠ch.',
      );
      return [];
    }

    // L·∫•y danh s√°ch c√°c product type duy nh·∫•t.
    final availableProductTypes = pricingSnapshot.docs
        .map((doc) => doc.data()['color_mixing_product_type'] as String?)
        .where((type) => type != null && type.isNotEmpty)
        .toSet() // toSet ƒë·ªÉ lo·∫°i b·ªè c√°c gi√° tr·ªã tr√πng l·∫∑p
        .toList();

    if (availableProductTypes.isEmpty) {
      print(
        '‚ÑπÔ∏è [ProductRepo] Kh√¥ng c√≥ "color_mixing_product_type" h·ª£p l·ªá trong th√¥ng tin gi√° c·ªßa m√†u ${color.id}.',
      );
      return [];
    }
    print(
      'üìÑ [ProductRepo] C√°c lo·∫°i s·∫£n ph·∫©m t√¨m th·∫•y cho m√†u: $availableProductTypes',
    );

    // 2. Truy v·∫•n `parent_products`
    //    - L·ªçc theo `trademarkRef` c·ªßa m√†u.
    //    - L·ªçc theo danh s√°ch `colorMixingProductType` t√¨m ƒë∆∞·ª£c.
    //    Firestore `whereIn` gi·ªõi h·∫°n 30 ph·∫ßn t·ª≠, nh∆∞ng s·ªë l∆∞·ª£ng product types cho m·ªôt m√†u
    //    th∆∞·ªùng r·∫•t nh·ªè n√™n kh√¥ng c·∫ßn chia nh·ªè (chunking) ·ªü ƒë√¢y.
    print(
      'üì¶ [ProductRepo] Truy v·∫•n "parent_products" v·ªõi trademarkRef=${color.trademarkRef} v√† productTypes=$availableProductTypes',
    );
    final parentProductsQuery = _firestore
        .collection('parent_products')
        .where('trademark_ref', isEqualTo: color.trademarkRef)
        .where('color_mixing_product_type', whereIn: availableProductTypes);

    final parentProductsSnapshot = await parentProductsQuery.get();

    final results = parentProductsSnapshot.docs
        .map((doc) => ParentProduct.fromFirestore(doc))
        .toList();

    print(
      '‚úÖ [ProductRepo] T√¨m th·∫•y ${results.length} ParentProduct t∆∞∆°ng th√≠ch.',
    );
    return results;
  }

  @override
  Future<List<Product>> getSkusForParent(String parentProductId) async {
    print(
      'üì¶ [ProductRepo] L·∫•y c√°c SKU cho ParentProduct ID: $parentProductId',
    );
    // T·∫°o m·ªôt DocumentReference ƒë·∫øn s·∫£n ph·∫©m cha.
    // Truy v·∫•n b·∫±ng DocumentReference l√† c√°ch ch√≠nh x√°c v√† an to√†n nh·∫•t.
    final parentDocRef = _firestore
        .collection('parent_products')
        .doc(parentProductId);

    final snapshot = await _firestore
        .collection('products')
        .where('parent_product_ref', isEqualTo: parentDocRef)
        .get();

    final skus = snapshot.docs
        .map((doc) => Product.fromFirestore(doc))
        .toList();
    // S·∫Øp x·∫øp c√°c SKU theo dung t√≠ch ƒë·ªÉ hi·ªÉn th·ªã m·ªôt c√°ch h·ª£p l√Ω.
    skus.sort((a, b) => (a.unitValue ?? 0).compareTo(b.unitValue ?? 0));
    print('‚úÖ [ProductRepo] T√¨m th·∫•y ${skus.length} SKU.');
    return skus;
  }

  @override
  Future<ParentProduct> getParentProductById(String id) async {
    final doc = await _firestore.collection('parent_products').doc(id).get();
    if (!doc.exists) {
      throw Exception('Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m cha v·ªõi ID: $id');
    }
    return ParentProduct.fromFirestore(
        doc as DocumentSnapshot<Map<String, dynamic>>);
  }
}

/// Ghi ch√∫ v·ªÅ t·ªëi ∆∞u h√≥a:
/// M·∫∑c d√π c√°ch ti·∫øp c·∫≠n tr√™n ho·∫°t ƒë·ªông t·ªët v·ªõi c·∫•u tr√∫c d·ªØ li·ªáu hi·ªán t·∫°i,
/// m·ªôt c√°ch t·ªëi ∆∞u h∆°n trong t∆∞∆°ng lai l√† "phi chu·∫©n h√≥a" (denormalize) d·ªØ li·ªáu.
/// B·∫±ng c√°ch th√™m tr·ª±c ti·∫øp c√°c tr∆∞·ªùng `categoryId` v√† `trademarkId` v√†o m·ªói
/// document trong collection `products`, b·∫°n c√≥ th·ªÉ th·ª±c hi·ªán l·ªçc ch·ªâ v·ªõi m·ªôt
/// truy v·∫•n duy nh·∫•t, hi·ªáu qu·∫£ v√† ƒë∆°n gi·∫£n h∆°n r·∫•t nhi·ªÅu.
