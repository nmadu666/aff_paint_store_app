import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/product_model.dart';

/// L·ªõp tr·ª´u t∆∞·ª£ng ƒë·ªãnh nghƒ©a c√°c ph∆∞∆°ng th·ª©c c·∫ßn c√≥ ƒë·ªÉ l·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m.
abstract class IProductRepository {
  /// L·∫•y danh s√°ch s·∫£n ph·∫©m, c√≥ th·ªÉ l·ªçc theo categoryId v√† trademarkId.
  ///
  /// N·∫øu kh√¥ng c√≥ b·ªô l·ªçc n√†o ƒë∆∞·ª£c cung c·∫•p, n√≥ s·∫Ω tr·∫£ v·ªÅ t·∫•t c·∫£ s·∫£n ph·∫©m.
  Future<List<Product>> getProducts({String? categoryId, String? trademarkId});
}

/// Tri·ªÉn khai repository s·ª≠ d·ª•ng Firebase Firestore.
class FirebaseProductRepository implements IProductRepository {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  @override
  Future<List<Product>> getProducts({
    String? categoryId,
    String? trademarkId,
  }) async {
    // Log ƒë·ªÉ ki·ªÉm tra c√°c b·ªô l·ªçc ƒë·∫ßu v√†o
    print(
      'üîç [ProductRepo] B·∫Øt ƒë·∫ßu l·∫•y s·∫£n ph·∫©m v·ªõi b·ªô l·ªçc: categoryId=$categoryId, trademarkId=$trademarkId',
    );

    // N·∫øu kh√¥ng c√≥ b·ªô l·ªçc, l·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m m·ªôt c√°ch hi·ªáu qu·∫£.
    if (categoryId == null && trademarkId == null) {
      final snapshot = await _firestore.collection('products').get();
      final products = snapshot.docs
          .map((doc) => Product.fromFirestore(doc))
          .toList();
      print(
        '‚úÖ [ProductRepo] Kh√¥ng c√≥ b·ªô l·ªçc. L·∫•y ƒë∆∞·ª£c ${products.length} s·∫£n ph·∫©m.',
      );
      return products;
    }

    // B∆∞·ªõc 1: X√¢y d·ª±ng v√† th·ª±c thi truy v·∫•n tr√™n `parent_products`.
    print('üìÑ [ProductRepo] B∆∞·ªõc 1: Truy v·∫•n collection "parent_products"...');
    Query parentQuery = _firestore.collection('parent_products');

    if (categoryId != null) {
      // Gi·∫£ ƒë·ªãnh categoryId l√† m·ªôt string kh·ªõp v·ªõi tr∆∞·ªùng 'category'
      parentQuery = parentQuery.where('category', isEqualTo: categoryId);
    }
    if (trademarkId != null) {
      parentQuery = parentQuery.where('trademark_ref', isEqualTo: trademarkId);
    }

    final parentSnapshot = await parentQuery.get();
    print(
      'üìÑ [ProductRepo] B∆∞·ªõc 1: T√¨m th·∫•y ${parentSnapshot.docs.length} s·∫£n ph·∫©m cha ph√π h·ª£p.',
    );

    if (parentSnapshot.docs.isEmpty) {
      return []; // Kh√¥ng c√≥ s·∫£n ph·∫©m cha n√†o kh·ªõp, tr·∫£ v·ªÅ danh s√°ch r·ªóng.
    }

    // B∆∞·ªõc 2: L·∫•y danh s√°ch c√°c ƒê∆Ø·ªúNG D·∫™N (String) c·ªßa s·∫£n ph·∫©m cha.
    // *** S·ª¨A L·ªñI QUAN TR·ªåNG: So s√°nh chu·ªói ƒë∆∞·ªùng d·∫´n thay v√¨ ƒë·ªëi t∆∞·ª£ng DocumentReference ***
    final parentRefPaths = parentSnapshot.docs
        .map((doc) => doc.reference.path)
        .toList();

    // B∆∞·ªõc 3: Truy v·∫•n collection `products` b·∫±ng `whereIn`.
    // X·ª≠ l√Ω gi·ªõi h·∫°n 30 m·ª•c c·ªßa `whereIn` b·∫±ng c√°ch chia th√†nh c√°c l√¥.
    print('üì¶ [ProductRepo] B∆∞·ªõc 2: Chu·∫©n b·ªã truy v·∫•n s·∫£n ph·∫©m con...');
    final List<Product> allProducts = [];
    const chunkSize = 30;

    // Chia danh s√°ch parentRefs th√†nh c√°c l√¥ nh·ªè h∆°n.
    final List<List<String>> chunks = [];
    for (var i = 0; i < parentRefPaths.length; i += chunkSize) {
      chunks.add(
        parentRefPaths.sublist(
          i,
          i + chunkSize > parentRefPaths.length
              ? parentRefPaths.length
              : i + chunkSize,
        ),
      );
    }

    // Th·ª±c hi·ªán c√°c truy v·∫•n song song cho t·ª´ng l√¥.
    final futures = chunks.map(
      (chunk) => _firestore
          .collection('products')
          .where('parent_product_ref', whereIn: chunk)
          .get(),
    );

    final snapshots = await Future.wait(futures);

    // G·ªôp k·∫øt qu·∫£ t·ª´ t·∫•t c·∫£ c√°c truy v·∫•n.
    for (final snapshot in snapshots) {
      allProducts.addAll(
        snapshot.docs.map((doc) => Product.fromFirestore(doc)).toList(),
      );
    }

    print(
      '‚úÖ [ProductRepo] B∆∞·ªõc 3: Ho√†n t·∫•t. T·ªïng s·ªë s·∫£n ph·∫©m l·∫•y ƒë∆∞·ª£c: ${allProducts.length}.',
    );
    return allProducts;
  }
}

/// Ghi ch√∫ v·ªÅ t·ªëi ∆∞u h√≥a:
/// M·∫∑c d√π c√°ch ti·∫øp c·∫≠n tr√™n ho·∫°t ƒë·ªông t·ªët v·ªõi c·∫•u tr√∫c d·ªØ li·ªáu hi·ªán t·∫°i,
/// m·ªôt c√°ch t·ªëi ∆∞u h∆°n trong t∆∞∆°ng lai l√† "phi chu·∫©n h√≥a" (denormalize) d·ªØ li·ªáu.
/// B·∫±ng c√°ch th√™m tr·ª±c ti·∫øp c√°c tr∆∞·ªùng `categoryId` v√† `trademarkId` v√†o m·ªói
/// document trong collection `products`, b·∫°n c√≥ th·ªÉ th·ª±c hi·ªán l·ªçc ch·ªâ v·ªõi m·ªôt
/// truy v·∫•n duy nh·∫•t, hi·ªáu qu·∫£ v√† ƒë∆°n gi·∫£n h∆°n r·∫•t nhi·ªÅu.
