import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/color_pricing_model.dart';
import '../models/color_data_model.dart';

/// L·ªõp tr·ª´u t∆∞·ª£ng ƒë·ªãnh nghƒ©a c√°c ph∆∞∆°ng th·ª©c c·∫ßn c√≥ ƒë·ªÉ l·∫•y d·ªØ li·ªáu m√†u s·∫Øc.
abstract class IColorRepository {
  Future<ColorPricing?> getColorPricing({
    required String colorId,
    required String colorMixingProductType,
    required String base,
  });

  /// L·∫•y danh s√°ch c√°c ƒë·ªëi t∆∞·ª£ng ColorData d·ª±a tr√™n danh s√°ch ID.
  Future<List<ColorData>> getColorsByIds(List<String> colorIds);

  /// L·∫•y danh s√°ch c√°c lo·∫°i g·ªëc s∆°n ('A', 'B'...) c√≥ s·∫µn cho m·ªôt m√†u v√† m·ªôt lo·∫°i s·∫£n ph·∫©m.
  Future<List<String>> getAvailableBasesForColor({
    required String colorId,
    required String colorMixingProductType,
  });
}

/// Tri·ªÉn khai repository s·ª≠ d·ª•ng Firebase Firestore.
class FirebaseColorRepository implements IColorRepository {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  @override
  Future<ColorPricing?> getColorPricing({
    required String colorId,
    required String colorMixingProductType,
    required String base,
  }) async {
    final querySnapshot = await _firestore
        .collection('colors')
        .doc(colorId)
        .collection('color_pricings')
        .where('color_mixing_product_type', isEqualTo: colorMixingProductType)
        .where('base', isEqualTo: base)
        .limit(1)
        .get();

    if (querySnapshot.docs.isNotEmpty) {
      return ColorPricing.fromFirestore(querySnapshot.docs.first);
    }

    return null;
  }

  @override
  Future<List<ColorData>> getColorsByIds(List<String> colorIds) async {
    if (colorIds.isEmpty) {
      return [];
    }

    final List<ColorData> allColors = [];
    const chunkSize = 30; // Gi·ªõi h·∫°n c·ªßa truy v·∫•n 'whereIn' trong Firestore

    for (var i = 0; i < colorIds.length; i += chunkSize) {
      final chunk = colorIds.sublist(
        i,
        i + chunkSize > colorIds.length ? colorIds.length : i + chunkSize,
      );

      final snapshot = await _firestore
          .collection('colors')
          .where(FieldPath.documentId, whereIn: chunk)
          .get();

      allColors.addAll(
        snapshot.docs
            .map(
              (doc) => ColorData.fromFirestore(
                doc as DocumentSnapshot<Map<String, dynamic>>,
              ),
            )
            .toList(),
      );
    }

    return allColors;
  }

  @override
  Future<List<String>> getAvailableBasesForColor({
    required String colorId,
    required String colorMixingProductType,
  }) async {
    print(
      'üîç [ColorRepo] L·∫•y c√°c g·ªëc s∆°n c√≥ s·∫µn cho colorId=$colorId, productType=$colorMixingProductType',
    );
    final snapshot = await _firestore
        .collection('colors')
        .doc(colorId)
        .collection('color_pricings')
        .where('color_mixing_product_type', isEqualTo: colorMixingProductType)
        .get();

    if (snapshot.docs.isEmpty) {
      print(
        '‚ÑπÔ∏è [ColorRepo] Kh√¥ng t√¨m th·∫•y th√¥ng tin gi√° n√†o, tr·∫£ v·ªÅ danh s√°ch g·ªëc s∆°n r·ªóng.',
      );
      return [];
    }

    // L·∫•y danh s√°ch c√°c g·ªëc s∆°n v√† lo·∫°i b·ªè c√°c gi√° tr·ªã tr√πng l·∫∑p.
    final bases = snapshot.docs
        .map((doc) => doc.data()['base'] as String?)
        .whereType<String>() // L·ªçc b·ªè null v√† ch·ªâ gi·ªØ l·∫°i String
        .toSet() // S·ª≠ d·ª•ng Set ƒë·ªÉ t·ª± ƒë·ªông lo·∫°i b·ªè c√°c gi√° tr·ªã tr√πng l·∫∑p
        .toList();

    print('‚úÖ [ColorRepo] C√°c g·ªëc s∆°n t√¨m th·∫•y: $bases');
    return bases;
  }
}
